#!/usr/bin/env bash
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

# COMMIT_MSG_FILE=$1
# COMMIT_SOURCE=$2
# SHA1=$3

# /usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
#!/bin/bash

#
# Inspects branch name and checks if it contains a Jira ticket number (i.e. ABC-123).
# If yes, commit message will be automatically prepended with [ABC-123].
#
# Useful for looking through git history and relating a commit or group of commits
# back to a user story.

if [ "$SKIP_PREPARE_COMMIT_MSG" != 1 ]; then
	BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	# Ensure BRANCH_NAME is not empty and is not in a detached HEAD state (i.e. rebase).
	# SKIP_PREPARE_COMMIT_MSG may be used as an escape hatch to disable this hook,
	# while still allowing other githooks to run.
	if [ ! -z "$BRANCH_NAME" ] && [ "$BRANCH_NAME" != "HEAD" ]; then
		PREFIX_PATTERN='[A-Za-z]{2,5}-[0-9]{1,5}'
		[[ $BRANCH_NAME =~ $PREFIX_PATTERN ]]
		PREFIX=${BASH_REMATCH[0]}
    PREFIX=$(echo "$PREFIX" | tr '[:lower:]' '[:upper:]')
		PREFIX_IN_COMMIT=$(grep -c "\[$PREFIX\]" "$1")
		# Ensure PREFIX exists in BRANCH_NAME and is not already present in the commit message
		if [[ -n "$PREFIX" ]] && ! [[ $PREFIX_IN_COMMIT -ge 1 ]]; then
			sed -i.bak -e "1s~^~[$PREFIX] ~" "$1"
		fi
	fi
fi
